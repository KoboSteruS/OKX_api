#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FastAPI —Å–µ—Ä–≤–µ—Ä–∞
"""

import requests
import socket
import subprocess
import sys
from datetime import datetime

def quick_server_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    server_url = "http://109.73.192.126:8001"
    
    print("üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 40)
    print(f"–í—Ä–µ–º—è: {datetime.now()}")
    print(f"–°–µ—Ä–≤–µ—Ä: {server_url}")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ 8001...")
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('109.73.192.126', 8001))
        sock.close()
        
        if result == 0:
            print("   ‚úÖ –ü–æ—Ä—Ç 8001 –æ—Ç–∫—Ä—ã—Ç")
        else:
            print("   ‚ùå –ü–æ—Ä—Ç 8001 –∑–∞–∫—Ä—ã—Ç")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: HTTP –æ—Ç–≤–µ—Ç
    print("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP –æ—Ç–≤–µ—Ç–∞...")
    try:
        response = requests.get(
            f"{server_url}/api/v1/health",
            timeout=10
        )
        
        if response.status_code == 200:
            print("   ‚úÖ HTTP –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–µ–Ω")
            print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response.elapsed.total_seconds():.3f}s")
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ HTTP: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ü—Ä–æ—Ü–µ—Å—Å FastAPI
    print("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ FastAPI...")
    try:
        result = subprocess.run(
            ['pgrep', '-f', 'app.main'],
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            pids = result.stdout.strip().split('\n')
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(pids)}")
            for pid in pids:
                if pid:
                    print(f"      PID: {pid}")
        else:
            print("   ‚ùå –ü—Ä–æ—Ü–µ—Å—Å FastAPI –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
    try:
        # CPU
        cpu_result = subprocess.run(
            ['top', '-bn1', '|', 'grep', '"Cpu(s)"'],
            shell=True, capture_output=True, text=True
        )
        if cpu_result.stdout:
            print(f"   CPU: {cpu_result.stdout.strip()}")
        
        # –ü–∞–º—è—Ç—å
        mem_result = subprocess.run(
            ['free', '-h'],
            capture_output=True, text=True
        )
        if mem_result.stdout:
            lines = mem_result.stdout.strip().split('\n')
            if len(lines) > 1:
                mem_line = lines[1]
                print(f"   RAM: {mem_line}")
                
    except Exception as e:
        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã: {e}")
    
    print("-" * 40)
    print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
    return True

if __name__ == "__main__":
    if quick_server_check():
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        sys.exit(0)
    else:
        print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
        print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: pkill -f 'python.*main.py' && python -m app.main")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/app.log")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É: python test_network.py")
        sys.exit(1) 